// Generated by auto imports
export {}
declare global {
  const { _useShortcuts, useShortcuts }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useShortcuts')
  const { abortNavigation, addRouteMiddleware, defineNuxtRouteMiddleware, navigateTo, onBeforeRouteLeave, onBeforeRouteUpdate, setPageLayout, useRoute, useRouter }: typeof import('../../node_modules/nuxt/dist/app/composables/router')
  const { callOnce }: typeof import('../../node_modules/nuxt/dist/app/composables/once')
  const { cancelIdleCallback, requestIdleCallback }: typeof import('../../node_modules/nuxt/dist/app/compat/idle-callback')
  const { clearError, createError, isNuxtError, showError, useError }: typeof import('../../node_modules/nuxt/dist/app/composables/error')
  const { clearNuxtData, refreshNuxtData, useAsyncData, useLazyAsyncData, useNuxtData }: typeof import('../../node_modules/nuxt/dist/app/composables/asyncData')
  const { clearNuxtState, useState }: typeof import('../../node_modules/nuxt/dist/app/composables/state')
  const { computed, customRef, defineAsyncComponent, defineComponent, effect, effectScope, getCurrentInstance, getCurrentScope, h, hasInjectionContext, inject, isProxy, isReactive, isReadonly, isRef, isShallow, markRaw, mergeModels, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onScopeDispose, onServerPrefetch, onUnmounted, onUpdated, onWatcherCleanup, provide, proxyRefs, reactive, readonly, ref, resolveComponent, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, toValue, triggerRef, unref, useAttrs, useCssModule, useCssVars, useId, useModel, useShadowRoot, useSlots, useTemplateRef, useTransitionState, watch, watchEffect, watchPostEffect, watchSyncEffect, withCtx, withDirectives, withKeys, withMemo, withModifiers, withScopeId }: typeof import('../../node_modules/vue')
  const { createPopper, usePopper }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/usePopper')
  const { defineAppConfig, defineNuxtPlugin, definePayloadPlugin, tryUseNuxtApp, useNuxtApp, useRuntimeConfig }: typeof import('../../node_modules/nuxt/dist/app/nuxt')
  const { defineLazyHydrationComponent }: typeof import('../../node_modules/nuxt/dist/app/composables/lazy-hydration')
  const { defineNuxtComponent }: typeof import('../../node_modules/nuxt/dist/app/composables/component')
  const { defineNuxtLink }: typeof import('../../node_modules/nuxt/dist/app/components/nuxt-link')
  const { definePayloadReducer, definePayloadReviver, isPrerendered, loadPayload, preloadPayload }: typeof import('../../node_modules/nuxt/dist/app/composables/payload')
  const { defineShortcuts }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/defineShortcuts')
  const { fetchContentNavigation }: typeof import('../../node_modules/@nuxt/content/dist/runtime/legacy/composables/navigation')
  const { flatUnwrap: unwrapSlot }: typeof import('../../node_modules/@nuxtjs/mdc/dist/runtime/utils/node')
  const { getAppManifest, getRouteRules }: typeof import('../../node_modules/nuxt/dist/app/composables/manifest')
  const { injectHead, useHead, useHeadSafe, useSeoMeta, useServerHead, useServerHeadSafe, useServerSeoMeta }: typeof import('../../node_modules/nuxt/dist/app/composables/head')
  const { isVue2, isVue3 }: typeof import('../../node_modules/nuxt/dist/app/compat/vue-demi')
  const { modalInjectionKey, useModal }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useModal')
  const { onNuxtReady }: typeof import('../../node_modules/nuxt/dist/app/composables/ready')
  const { onPrehydrate, prerenderRoutes, setResponseStatus, useRequestEvent, useRequestFetch, useRequestHeader, useRequestHeaders, useResponseHeader }: typeof import('../../node_modules/nuxt/dist/app/composables/ssr')
  const { parseMarkdown }: typeof import('../../node_modules/@nuxtjs/mdc/dist/runtime/parser')
  const { prefetchComponents, preloadComponents, preloadRouteComponents }: typeof import('../../node_modules/nuxt/dist/app/composables/preload')
  const { queryContent }: typeof import('../../node_modules/@nuxt/content/dist/runtime/legacy/composables/query')
  const { refreshCookie, useCookie }: typeof import('../../node_modules/nuxt/dist/app/composables/cookie')
  const { reloadNuxtApp }: typeof import('../../node_modules/nuxt/dist/app/composables/chunk')
  const { setInterval }: typeof import('../../node_modules/nuxt/dist/app/compat/interval')
  const { slidOverInjectionKey, useSlideover }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useSlideover')
  const { updateAppConfig, useAppConfig }: typeof import('../../node_modules/nuxt/dist/app/config')
  const { useCarouselScroll }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useCarouselScroll')
  const { useColorMode }: typeof import('../../node_modules/@nuxtjs/color-mode/dist/runtime/composables')
  const { useContentDisabled: useContent, useContentDisabled: useContentState, withContentBase }: typeof import('../../node_modules/@nuxt/content/dist/runtime/composables/utils')
  const { useContentHead }: typeof import('../../node_modules/@nuxt/content/dist/runtime/composables/head')
  const { useContentHelpers }: typeof import('../../node_modules/@nuxt/content/dist/runtime/composables/helpers')
  const { useContentPreview }: typeof import('../../node_modules/@nuxt/content/dist/runtime/composables/preview')
  const { useCopyToClipboard }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useCopyToClipboard')
  const { useFetch, useLazyFetch }: typeof import('../../node_modules/nuxt/dist/app/composables/fetch')
  const { useFormGroup }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useFormGroup')
  const { useHydration }: typeof import('../../node_modules/nuxt/dist/app/composables/hydrate')
  const { useInjectButtonGroup, useProvideButtonGroup }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useButtonGroup')
  const { useLoadingIndicator }: typeof import('../../node_modules/nuxt/dist/app/composables/loading-indicator')
  const { usePreviewMode }: typeof import('../../node_modules/nuxt/dist/app/composables/preview')
  const { useRequestURL }: typeof import('../../node_modules/nuxt/dist/app/composables/url')
  const { useRouteAnnouncer }: typeof import('../../node_modules/nuxt/dist/app/composables/route-announcer')
  const { useRuntimeHook }: typeof import('../../node_modules/nuxt/dist/app/composables/runtime-hook')
  const { useScript, useScriptClarity, useScriptCloudflareWebAnalytics, useScriptCrisp, useScriptEventPage, useScriptFathomAnalytics, useScriptGoogleAdsense, useScriptGoogleAnalytics, useScriptGoogleMaps, useScriptGoogleTagManager, useScriptHotjar, useScriptIntercom, useScriptLemonSqueezy, useScriptMatomoAnalytics, useScriptMetaPixel, useScriptNpm, useScriptPlausibleAnalytics, useScriptRybbitAnalytics, useScriptSegment, useScriptSnapchatPixel, useScriptStripe, useScriptTriggerConsent, useScriptTriggerElement, useScriptUmamiAnalytics, useScriptVimeoPlayer, useScriptXPixel, useScriptYouTubePlayer }: typeof import('../../node_modules/nuxt/dist/app/composables/script-stubs')
  const { useTimer }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useTimer')
  const { useToast }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useToast')
  const { useUI }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useUI')
  const { useUnwrap }: typeof import('../../node_modules/@nuxt/content/dist/runtime/composables/useUnwrap')
}
// for type re-export
declare global {
  // @ts-ignore
  export type { Component, ComponentPublicInstance, ComputedRef, DirectiveBinding, ExtractDefaultPropTypes, ExtractPropTypes, ExtractPublicPropTypes, InjectionKey, PropType, Ref, MaybeRef, MaybeRefOrGetter, VNode, WritableComputedRef } from '../../node_modules/vue'
  import('../../node_modules/vue')
}
// for vue template auto import
type UnwrapRefs<T> = {
  [K in keyof T]: import('vue').UnwrapRef<T[K]>
}
namespace _ComponentCustomProperties {
  const { _useShortcuts, useShortcuts }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useShortcuts')
  const { abortNavigation, addRouteMiddleware, defineNuxtRouteMiddleware, navigateTo, onBeforeRouteLeave, onBeforeRouteUpdate, setPageLayout, useRoute, useRouter }: typeof import('../../node_modules/nuxt/dist/app/composables/router')
  const { callOnce }: typeof import('../../node_modules/nuxt/dist/app/composables/once')
  const { cancelIdleCallback, requestIdleCallback }: typeof import('../../node_modules/nuxt/dist/app/compat/idle-callback')
  const { clearError, createError, isNuxtError, showError, useError }: typeof import('../../node_modules/nuxt/dist/app/composables/error')
  const { clearNuxtData, refreshNuxtData, useAsyncData, useLazyAsyncData, useNuxtData }: typeof import('../../node_modules/nuxt/dist/app/composables/asyncData')
  const { clearNuxtState, useState }: typeof import('../../node_modules/nuxt/dist/app/composables/state')
  const { computed, customRef, defineAsyncComponent, defineComponent, effect, effectScope, getCurrentInstance, getCurrentScope, h, hasInjectionContext, inject, isProxy, isReactive, isReadonly, isRef, isShallow, markRaw, mergeModels, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onScopeDispose, onServerPrefetch, onUnmounted, onUpdated, onWatcherCleanup, provide, proxyRefs, reactive, readonly, ref, resolveComponent, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, toValue, triggerRef, unref, useAttrs, useCssModule, useCssVars, useId, useModel, useShadowRoot, useSlots, useTemplateRef, useTransitionState, watch, watchEffect, watchPostEffect, watchSyncEffect, withCtx, withDirectives, withKeys, withMemo, withModifiers, withScopeId }: typeof import('../../node_modules/vue')
  const { createPopper, usePopper }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/usePopper')
  const { defineAppConfig, defineNuxtPlugin, definePayloadPlugin, tryUseNuxtApp, useNuxtApp, useRuntimeConfig }: typeof import('../../node_modules/nuxt/dist/app/nuxt')
  const { defineLazyHydrationComponent }: typeof import('../../node_modules/nuxt/dist/app/composables/lazy-hydration')
  const { defineNuxtComponent }: typeof import('../../node_modules/nuxt/dist/app/composables/component')
  const { defineNuxtLink }: typeof import('../../node_modules/nuxt/dist/app/components/nuxt-link')
  const { definePayloadReducer, definePayloadReviver, isPrerendered, loadPayload, preloadPayload }: typeof import('../../node_modules/nuxt/dist/app/composables/payload')
  const { defineShortcuts }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/defineShortcuts')
  const { fetchContentNavigation }: typeof import('../../node_modules/@nuxt/content/dist/runtime/legacy/composables/navigation')
  const { flatUnwrap: unwrapSlot }: typeof import('../../node_modules/@nuxtjs/mdc/dist/runtime/utils/node')
  const { getAppManifest, getRouteRules }: typeof import('../../node_modules/nuxt/dist/app/composables/manifest')
  const { injectHead, useHead, useHeadSafe, useSeoMeta, useServerHead, useServerHeadSafe, useServerSeoMeta }: typeof import('../../node_modules/nuxt/dist/app/composables/head')
  const { isVue2, isVue3 }: typeof import('../../node_modules/nuxt/dist/app/compat/vue-demi')
  const { modalInjectionKey, useModal }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useModal')
  const { onNuxtReady }: typeof import('../../node_modules/nuxt/dist/app/composables/ready')
  const { onPrehydrate, prerenderRoutes, setResponseStatus, useRequestEvent, useRequestFetch, useRequestHeader, useRequestHeaders, useResponseHeader }: typeof import('../../node_modules/nuxt/dist/app/composables/ssr')
  const { parseMarkdown }: typeof import('../../node_modules/@nuxtjs/mdc/dist/runtime/parser')
  const { prefetchComponents, preloadComponents, preloadRouteComponents }: typeof import('../../node_modules/nuxt/dist/app/composables/preload')
  const { queryContent }: typeof import('../../node_modules/@nuxt/content/dist/runtime/legacy/composables/query')
  const { refreshCookie, useCookie }: typeof import('../../node_modules/nuxt/dist/app/composables/cookie')
  const { reloadNuxtApp }: typeof import('../../node_modules/nuxt/dist/app/composables/chunk')
  const { setInterval }: typeof import('../../node_modules/nuxt/dist/app/compat/interval')
  const { slidOverInjectionKey, useSlideover }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useSlideover')
  const { updateAppConfig, useAppConfig }: typeof import('../../node_modules/nuxt/dist/app/config')
  const { useCarouselScroll }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useCarouselScroll')
  const { useColorMode }: typeof import('../../node_modules/@nuxtjs/color-mode/dist/runtime/composables')
  const { useContentDisabled: useContent, useContentDisabled: useContentState, withContentBase }: typeof import('../../node_modules/@nuxt/content/dist/runtime/composables/utils')
  const { useContentHead }: typeof import('../../node_modules/@nuxt/content/dist/runtime/composables/head')
  const { useContentHelpers }: typeof import('../../node_modules/@nuxt/content/dist/runtime/composables/helpers')
  const { useContentPreview }: typeof import('../../node_modules/@nuxt/content/dist/runtime/composables/preview')
  const { useCopyToClipboard }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useCopyToClipboard')
  const { useFetch, useLazyFetch }: typeof import('../../node_modules/nuxt/dist/app/composables/fetch')
  const { useFormGroup }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useFormGroup')
  const { useHydration }: typeof import('../../node_modules/nuxt/dist/app/composables/hydrate')
  const { useInjectButtonGroup, useProvideButtonGroup }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useButtonGroup')
  const { useLoadingIndicator }: typeof import('../../node_modules/nuxt/dist/app/composables/loading-indicator')
  const { usePreviewMode }: typeof import('../../node_modules/nuxt/dist/app/composables/preview')
  const { useRequestURL }: typeof import('../../node_modules/nuxt/dist/app/composables/url')
  const { useRouteAnnouncer }: typeof import('../../node_modules/nuxt/dist/app/composables/route-announcer')
  const { useRuntimeHook }: typeof import('../../node_modules/nuxt/dist/app/composables/runtime-hook')
  const { useScript, useScriptClarity, useScriptCloudflareWebAnalytics, useScriptCrisp, useScriptEventPage, useScriptFathomAnalytics, useScriptGoogleAdsense, useScriptGoogleAnalytics, useScriptGoogleMaps, useScriptGoogleTagManager, useScriptHotjar, useScriptIntercom, useScriptLemonSqueezy, useScriptMatomoAnalytics, useScriptMetaPixel, useScriptNpm, useScriptPlausibleAnalytics, useScriptRybbitAnalytics, useScriptSegment, useScriptSnapchatPixel, useScriptStripe, useScriptTriggerConsent, useScriptTriggerElement, useScriptUmamiAnalytics, useScriptVimeoPlayer, useScriptXPixel, useScriptYouTubePlayer }: typeof import('../../node_modules/nuxt/dist/app/composables/script-stubs')
  const { useTimer }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useTimer')
  const { useToast }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useToast')
  const { useUI }: typeof import('../../node_modules/@nuxt/ui/dist/runtime/composables/useUI')
  const { useUnwrap }: typeof import('../../node_modules/@nuxt/content/dist/runtime/composables/useUnwrap')
}
declare module 'vue' {
  interface ComponentCustomProperties extends UnwrapRefs<typeof _ComponentCustomProperties> {}
}